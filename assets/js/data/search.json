[ { "title": "测试子目录", "url": "/posts/test-sub-dir/", "categories": "测试", "tags": "测试", "date": "2021-12-06 22:48:33 +0800", "snippet": "测试post目录是否支持子目录" }, { "title": "Windows常用软件", "url": "/posts/windows-softs/", "categories": "常用软件", "tags": "常用软件", "date": "2021-11-23 22:48:33 +0800", "snippet": "Adobe Acrobat可编辑pdfAdobe Acrobat 9 Pro序列号：1118-4018-6583-4956-2486-7805如果想在word里面导出pdf,先安装word,再安装这个软件时会安装一个word插件，用于word转pdf.可以在pdf上划线做笔记！多平台文件同步软件坚果云Windows卸载软件CCleaner音频编辑软件Audacity: https://github.com/audacity/audacity 开源，跨平台，官网 https://www.audacityteam.org/Win10 桌面管理 软件名字叫 Rolan，类似以前的vstart,用于快捷方式管理。让桌面不是乱七八糟一大堆图标。看起来很清爽。下载：关注公众号toprank520回复暗语 a7aq 获取下载链接，解压密码elesosListarywin 文件搜索工具free for personal use onlyhttps://www.listary.com/download按2次ctrl，全局搜索， 在本目录，只直输入就能搜索，不用打开软件。按esc关闭窗口。" }, { "title": "CMake 常用操作", "url": "/posts/cmake/", "categories": "CMake", "tags": "CMake", "date": "2021-11-08 22:48:33 +0800", "snippet": "open-source, cross-platform注释用#安装cross platform make的缩写是一个比make更高级的编译配置工具，可以根据不同平台、不同的编译器，生成相应的Makefile或者vcproj项目文件。通过编写CMakeLists.txt，可以控制生成的Makefile，从而控制编译过程。Cmake 并不直接建构出最终的软件，而是产生标准的建构档（如 Unix 的 Makefile 或 Windows Visual C++ 的 projects/workspaces），然后再用一般的建构方式使用。这使得熟悉某个集成开发环境（IDE）的开发者可以用标准的方式建构他的软件。Mac上，可安装dmg,然后Add this line to your .bashrc file: PATH=”/Applications/CMake.app/Contents/bin”:”$PATH”Linux下cmake -version./bootstrapmakemake install如果已经安装了cmake,想要安装新版本:cmake . //后面有个点 makemake install或yum install cmakecmake和autotools是makefile的上层工具，它们的目的是为了产生可移植的makefile，并简化自己动手写makefile时的巨大工作量。因此，对于大多数项目，应当考虑使用更自动化一些的 cmake或者autotools来生成makefile，而不是上来就动手编写makefile。-G &amp;lt;generator-name&amp;gt; = Specify a build system generator.如： Unix Makefiles = Generates standard UNIX makefiles.-D :&amp;lt;type&amp;gt;=&amp;lt;value&amp;gt; = Create a cmake cache entry.ccmake is curses (terminal handling library) interface to CMake.cmake is the CLI (Command Line Interface)The “ccmake” executable is the CMake curses interface. ccmake好像在cmake-curses-gui 包里面参考https://cmake.org/download/https://cmake.org/install/http://blog.csdn.net/fly_yr/article/details/49815705命令行工具使用https://cmake.org/cmake/help/latest/manual/cmake.1.htmlhttps://cmake.org/cmake/help/latest/guide/user-interaction/index.html#guide:User%20Interaction%20Guidemkdir build cd build cmake .. -DCMAKE_INSTALL_PREFIX=/opt/the/prefix //其它选项 -G xxx； 指定平台名 -A x64； --graphviz=[file]； -Dvar=value,常见变量 -DCMAKE_MODULE_PATH path for CMake modules to be loaded by the include() or find_package() commands -DCMAKE_PREFIX_PATH searched by the find_package(), find_library(), 搜索库的 -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBScmake --build . //，注意参数目录只有一个点，表示当前目录 ，或 cmake --build . --target install --config Release //与上面命令不互斥，都要执行，这步是安装， --prefix xxx； 第3方库第3方库一般提供 FooConfig.cmake or foo-config.cmakefind_package(SomePackage REQUIRED)add_executable(MyExe main.cpp)target_link_libraries(MyExe PRIVATE SomePrefix::LibName)Cmake 制作动态库先在上层随便新建一个目录，比如libs在里面新建一个CMakeLists.txtcmake_minimum_required(VERSION 3.10)project(lodepngproj VERSION 1.0)set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON) //这个会指示vs: Auto build dll exportsset(CMAKE_CXX_STANDARD 11)add_subdirectory(lodepng)然后新建一个子目录lodepng,放上源码（此处只有一个cpp和h）和CMakeLists.txt add_library(lodepng SHARED lodepng.cpp) //没错，就是这一行。然后打开cmake-gui生成vs工程进行编译。有些第3方库，比如curl,需要先配置一些选项。如选CMAKE_OSX_ARCHITECTURES 为arm64,(可以在intel mac上编译arm64，不过要求xcode在12.1以上才行。xcode12.5需要macos 11.0以上)比如OPENSSL_CRYPTO_LIBRARY关于find_packagehttps://stackoverflow.com/questions/31343813/displaying-cmake-variables https://blogs.kde.org/2011/11/09/cool-new-stuff-cmake-286-2-pkg-config-compatible-mode-added-use-eg-autotoolscmake --find-package -DNAME=ZLIB -DCOMPILER_ID=GNU -DLANGUAGE=C -DMODE=EXISTcmake --find-package -DNAME=ZLIB -DCOMPILER_ID=GNU -DLANGUAGE=C -DMODE=COMPILEcmake --find-package -DNAME=ZLIB -DCOMPILER_ID=GNU -DLANGUAGE=C -DMODE=LINK -DCMAKE_PREFIX_PATH=/Users/xxx/3rdparty/libz/mac1，Cmake find library custom library locationfind_library(CURL_LIBRARY NAMES curl curllib libcurl_imp curllib_static HINTS &quot;${CMAKE_PREFIX_PATH}/curl/lib&quot;)use HINTSfind_package(CAMODOCAL REQUIRED HINTS /usr/local/lib/cmake/CAMODOCAL)生成xcode工程一般如果没有CMakeLists.txt,可以自己编写，然后用cmake-gui生成，参考：Cmake 制作动态库一些常见变量LINK_DIRECTORIES List of directories to use for the linkfile(RELATIVE_PATH &amp;lt;variable&amp;gt; &amp;lt;directory&amp;gt; &amp;lt;file&amp;gt;) // Compute the relative path from a &amp;lt;directory&amp;gt; to a &amp;lt;file&amp;gt; and store it in the &amp;lt;variable&amp;gt;.区分debug和release$&amp;lt;$&amp;lt;CONFIG:Debug&amp;gt;:${prj_alib_directory}/xxxD.lib&amp;gt; https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html$&amp;lt;$&amp;lt;CONFIG:Release&amp;gt;:${prj_alib_directory}/xxx.lib&amp;gt;依赖关系target_link_libraries (${PROJECT_NAME}PRIVATE ${CURL_LIBS}这种是私有包含，如果本包被其它库依赖，是感知不到这个curl的。常用函数string(COMPARE EQUAL &amp;lt;string1&amp;gt; &amp;lt;string2&amp;gt; &amp;lt;output_variable&amp;gt;) //Compare the strings and store true or false in the &amp;lt;output_variable&amp;gt;.if (NOT TARGET PYTHON3)类似宏定义#ifndef https://cmake.org/cmake/help/latest/command/if.html#existence-checksCmake output messagemessage([&amp;lt;mode&amp;gt;] &quot;message to display&quot; ...)常见问题CMake Error: Xcode 1.5 not supported.sudo /usr/bin/xcode-select --switch /Users/admin/Downloads/Xcode.appAfter that Cmake will be able to generate projects properly!How to use framework in Cmake：target_link_libraries( &quot;-framework AVFoundation&quot; &quot;-framework CoreGraphics&quot; &quot;-framework CoreMotion&quot; &quot;-framework Foundation&quot; &quot;-framework MediaPlayer&quot; &quot;-framework OpenGLES&quot; &quot;-framework QuartzCore&quot; &quot;-framework UIKit&quot; )-framework Pythonfind_package(OpenGL REQUIRED)include_directories(${OPENGL_INCLUDE_DIR})target_link_libraries( ${OPENGL_LIBRARIES})find_package( PythonLibs 2.7 REQUIRED )include_directories( ${PYTHON_INCLUDE_DIRS} )target_link_libraries( greet_ext ${Boost_LIBRARIES} ${PYTHON_LIBRARIES} greet )What you get after installing is a number of things:A Python 3.9 folder in your Applications folder. In here you find IDLE, the development environment that is a standard part of official Python distributions; and PythonLauncher, which handles double-clicking Python scripts from the Finder.A framework /Library/Frameworks/Python.framework, which includes the Python executable and libraries. The installer adds this location to your shell path. To uninstall MacPython, you can simply remove these three things. A symlink to the Python executable is placed in /usr/local/bin/.https://stackoverflow.com/questions/27585896/how-to-use-framework-using-cmakehttps://docs.python.org/3/using/mac.html#:~:text=The%20Apple%2Dprovided%20build%20of,%2D%20or%20third%2Dparty%20software.https://py2app.readthedocs.io/en/latest/https://joaoventura.net/blog/2016/embeddable-python-osx/其它Mastering CMake 电子书下载：参考https://gitlab.kitware.com/cmake/community/-/wikis/homehttps://cmake.org/documentation/next:https://cmake.org/cmake/help/latest/guide/tutorial/index.htmlhttps://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.htmlhttps://cmake.org/cmake/help/latest/manual/cmake-commands.7.htmlhttps://cmake.org/cmake/help/latest/manual/cmake-language.7.html#organization" }, { "title": "git 常用操作", "url": "/posts/git/", "categories": "git", "tags": "git", "date": "2021-07-09 22:48:33 +0800", "snippet": "Windows版本: https://git-scm.com/downloadsGit的好处是提交时不需要联网，有网络时再推送即可如果clone时使用https，推送时需要输入密码，最好用ssh协议工作区（Working Directory）电脑里能看到的目录版本库（Repository）工作区有一个隐藏目录.git，是Git的版本库。里面有暂存区，add和commit就是在里面。提交到本地git add file_namegit ci -m &quot;message&quot;git add [dir] # 添加指定目录到暂存区，包括子目录git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别初始配置git config --global user.name &quot;your_name&quot;git config --global user.email your_email查看config配置信息查看系统config git config --system --list　　查看当前用户（global）配置 git config --global --list 查看当前仓库配置信息 git config --local --list配置别名以后输入git st就表示git status，可以节省时间git config --global alias.st status &amp;amp;&amp;amp; git config --global alias.co checkout git config --global alias.ci commit &amp;amp;&amp;amp; git config --global alias.br branch忽略文件权限变化,在项目里面运行：git config core.fileMode false常用操作git add -A &amp;amp;&amp;amp; git ci-m &quot;update&quot; &amp;amp;&amp;amp; git push -u origin master不想要的分支不想合并的分支，使用大写的-D参数删除git branch -D feature-vulcan修改urlgit remote set-url origin new_urlTortoiseGit生成.PPK拓展名的密钥TortoiseGit 使用扩展名为ppk的密钥，而不是ssh-keygen生成的rsa密钥。使用命令ssh-keygen -C “邮箱地址” -t rsa产生的密钥在TortoiseGit中不能用。而git的开发必须要用到rsa密钥，因此需要用到TortoiseGit的putty key generator工具来生成既适用于git的rsa密钥也适用于TortoiseGit的ppk密钥运行puttygen将上图中多行文本框的内容全选、复制，并粘贴到git账户的 SSH public key 中，这就是适用于git的公钥。点击上图中的“Save private key”按钮,将生成的key保存为适用于 TortoiseGit的私钥（扩展名为.ppk）。运行 TortoiseGit 开始菜单中的Pageant程序，程序启动后将自动停靠在任务栏中，双击该图标，弹出key管理列表，点击“Add Key”按钮，将保存的ppk私钥添加进来即可。remotegit remote //列出所有远程主机git remote -v//使用-v选项，可以查看远程主机的网址：添加远程主机git remote add &amp;lt;主机名&amp;gt; &amp;lt;网址&amp;gt;删除远程主机git remote rm &amp;lt;主机名&amp;gt;Git clone仓库的一个子目录cd modelsgit initgit remote add origin https://github.com/tensorflow/models.git # 增加远端的仓库地址git config core.sparsecheckout true # 设置Sparse Checkout 为true echo &quot;research/deeplab&quot; &amp;gt;&amp;gt; .git/info/sparse-checkout # 将要部分clone的目录相对根目录的路径写入配置文件git pull origin master如果只想保留最新的文件而不要历史版本的文件，上例最后一行可以用git pull –dpeth 1命令，即“浅克隆”：git pull --depth 1 origin master git有个”Spare Checkout”的功能，在checkout的时候，只跟踪符合配置文件.git/info/sparse-checkout里面写入的模式的文件git 查看分支创建时间git reflog show --date=iso &amp;lt;branch name&amp;gt;或者在浏览器的push事件里面可以看到。查看仓库里面，自己改了多少行代码git log --author=&quot;liudan&quot; --pretty=tformat: --numstat | awk &#39;{ add += $1; subs += $2; loc += $1 - $2 } END { printf &quot;added lines: %s, removed lines: %s, total lines: %s\\n&quot;, add, subs, loc }&#39; - added lines: 4994, removed lines: 2282, total lines: 2712cherry-pick防止重复修复在master分支上修复了bug后，我们要想一想，dev分支是早期从master分支分出来的，所以，这个bug其实在当前dev分支上也存在。同样的bug，要在dev上修复，我们只需要把4c805e2 fix bug 101这个提交所做的修改“复制”到dev分支。注意：我们只想复制4c805e2 fix bug 101这个提交所做的修改，并不是把整个master分支merge过来。cherry-pick命令，让我们能复制一个特定的提交到当前分支：git cherry-pick 4c805e2就不需要在dev分支上手动再把修bug的过程重复一遍。处理冲突如果git merge feature1冲突了。解决后，add,ci,再删除分支不用Fast forward, –no-ff参数，表示禁用Fast forward：git merge --no-ff -m &quot;merge with no-ff&quot; dev Git就会在merge时生成一个新的commit,因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。改动git diff readme.txt git loggit log --pretty=onelineHEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^回退到上一个版本git reset --hard HEAD^git reset --hard 1094a //回到某个版本撤销git checkout – readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。总之，就是让这个文件回到最近一次git commit或git add时的状态。git reset HEAD readme.txt 把暂存区的修改撤销掉（unstage），就是撤销add过后的。git checkout . # 恢复暂存区的所有文件到工作区git clean -nfd 删除 untracked files,d表示目录，-n 参数先看看会删掉哪些文件，防止重要文件被误删，然后运行git clean -fd真正删除。（最好在子目录下运行！一部分一部分的删除）返回到某个版本，不要本地的修改了。先show log, 选reset ，第3个hard选项。To restore all files in the current directory$ git restore . //可以先cd到对应目录再执行运行上面命令：error: pathspec ‘.’ did not match any file(s) known to git，可能是没有变化！撤消对文件的修改状态：git co -- &amp;lt;file&amp;gt;删除文件rm test.txt &amp;amp;&amp;amp; git rm test.txt &amp;amp;&amp;amp; git commit -m &quot;remove test.txt&quot;误删的文件恢复到最新版本git checkout -- test.txt 用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。 也可以作用于目录没有被添加到版本库就被删除的文件，是无法恢复的！相关命令Git add . git add -u git add -A命令区别git add -A 提交所有变化，--all的缩写git add . 同-Agit add -u 已经被add的文件（即tracked file） ,不会提交新文件（untracked file）。（git add --update的缩写）即： -u 提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)详细请参见git help addhttp://www.cnblogs.com/skura23/p/5859243.htmlstashGit还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：不add和ci就想Pull代码？git stash save “001”git stash listgit pullgit stash pop 会自动合并。只想push修改的部分文件1，add,ci想要push的文件2，git stash //3,git pull –rebase4,git stash pop5,git pushfetch与pullgit fetch &amp;lt;远程主机名&amp;gt; #通常用来查看他人的进程，取回的代码对本地开发代码没有影响默认取回所有分支的更新,如果只想取回特定分支的更新，可以指定分支名。git fetch &amp;lt;远程主机名&amp;gt; &amp;lt;分支名&amp;gt;取回远程主机的更新以后，可以在它的基础上，创建一个新的分支。git checkout -b newBrach origin/master也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。 如在当前分支上，合并origin/master：git merge origin/master或者git rebase origin/master git pull的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。git pull &amp;lt;远程主机名&amp;gt; &amp;lt;远程分支&amp;gt;:&amp;lt;本地分支&amp;gt;比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。git pull origin next:master这等同于先做git fetch，再做git mergegit fetch origingit merge origin/nextRebase变基为什么Git的提交历史不能是一条干净的直线？git pull时有可能会自动生成一次提交。git rebase 分叉的提交现在变成一条直线了！然后pushrebase操作可以把本地未push的分叉提交历史整理成直线；https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BAmerge合并的结果是生成一个新的快照（并提交）其实，还有一种方法：你可以提取在 experiment 中引入的补丁和修改，然后在 master 的基础上应用一次。 在 Git 中，这种操作就叫做 变基（rebase）。 你可以使用 rebase 命令将提交到某一分支上的所有修改都移至另一分支上，就好像“重新播放”一样。$ git checkout experiment$ git rebase master现在回到 master 分支，进行一次快进合并。$ git checkout master$ git merge experimentGit pull –rebaseIf you pull remote changes with the flag –rebase, then your local changes are reapplied on top of the remote changes.https://sdqweb.ipd.kit.edu/wiki/Git_pull_–rebase_vs._–mergeIt is best practice to always rebase your local commits when you pull before pushing them.git config --global pull.rebase truehttps://stackoverflow.com/questions/2472254/when-should-i-use-git-pull-rebase推送push如果要推送其他分支，比如dev，就改成：git push origin dev别的小伙伴，创建远程origin的dev分支到本地git checkout -b dev origin/dev如果别人已经向远程库push了。那我们push前需要先git branch --set-upstream-to=origin/dev dev 指定本地dev分支与远程origin/dev分支的链接git pull如果自动合并有冲突，就手动解决。###提交代码前先下载最新的线上代码并进行合并git pull //会进行2个操作，下载与合并,或git pull --rebase如果有冲突，解决掉并git add和git commit，最后再推送到服务器上。git push &amp;lt;远程主机名&amp;gt; &amp;lt;本地分支&amp;gt;:&amp;lt;远程分支&amp;gt;顺序是&amp;lt;源&amp;gt;:&amp;lt;目的&amp;gt;，所以git pull是&amp;lt;远程分支&amp;gt;:&amp;lt;本地分支&amp;gt;，而git push是&amp;lt;本地分支&amp;gt;:&amp;lt;远程分支&amp;gt;。push时如果该远程分支不存在，则会被新建。删除origin主机的master分支:git push origin --delete master如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样以后就可以不加任何参数使用git push了git push -u origin master不带任何参数的git push，默认只推送当前分支将本地的所有分支都推送到远程主机，这时需要使用–all选项：git push --all origingit branch --set-upstream-to=origin/branch-name branch-name 将branch-name分支追踪远程分支origin/branch-name分支管理git checkout -b develop master删除dev分支就是把dev指针给删掉dev分支的工作完成，我们就可以切换回master分支：git checkout mastergit merge dev把dev分支的工作成果合并到master分支上，Fast-forward信息告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。Your branch is ahead of &#39;origin/master&#39; by 1 commit.提示我们当前master分支比远程的master分支要超前1个提交。branch查看当前所在分支：git br //前面有*号的表示当前所在分支, -a查看所有分支,-r选项可以用来查看远程分支， 分支管理代码下载后，先在本地创建一个分支git co -b bug4 //创建一个 bug4分支 并切换过去，用以解决编号为4的bug或者创建一个开发新功能的分支git co -b new_feature_name 确定合并这个分支git co master //切换到主分支git merge bug4 //合并bug4分支git br -d bug4 //删除bug4分支其它git checkout -B new_branch &amp;lt;start_point&amp;gt;其中start-point可以是tag, https://git-scm.com/docs/git-branch#Documentation/git-branch.txt-ltstart-pointgt服务器Git 本地服务器git init --bare star.gitcd star.gitpwd/c/Users/elesos/laravel_code/aa/star.gitthengit clone /c/Users/elesos/laravel_code/aa/star.gitLinux 搭建 git 服务器后面注释部分为Ubuntu平台yum install git #apt install git创建一个git用户，用来运行git服务useradd git #adduser gitpasswd git先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：git init --bare sample.git #Git会创建一个裸仓库，裸仓库没有工作区，并且服务器上的Git仓库通常都以.git结尾。chown -R git:git sample.git将你的id_rsa.pub上传到git服务器，然后用cat命令将内容拷贝到授权文件authorized_keys中。su git 如果.ssh目录不存在，可以运行ssh-keygen -t rsa -C “yourname”touch /home/git/.ssh/authorized_keys #注意authorized_keys文件权限为gitcat id_ras.pub &amp;gt;&amp;gt; authorized_keys #注意a single &#39;&amp;gt;&#39; will overwrite all the contents of the second file you specify. A double &#39;&amp;gt;&#39; will append it。If you want to add others to your access list, they simply need to give you their id_rsa.pub key and you append it to the authorized keys file.一行一个 打开RSA认证vim /etc/ssh/sshd_configRSAAuthentication yes PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keysservice sshd restart现在，可以通过git clone命令克隆远程仓库了：git clone git@server:/srv/sample.gitgit clone git@192.168.8.34:/data/git/learngit.git如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，可以用Gitosis来管理公钥。管理权限有很多视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。这里不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。权限参考用户home目录755权限 rwx r-x r-x.ssh目录700权限 rwx — —authorized_keys 600权限 rx- — —参考https://github.com/elesos/progit/blob/master/zh/04-git-server/01-chapter4.markdown 有GitWeb的介绍https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%90%AD%E5%BB%BA-Git常见问题Git for Windows乱码卸载重装即可。git config --global core.quotepath false git config --global gui.encoding utf-8git config --global i18n.commit.encoding utf-8 git config --global i18n.logoutputencoding utf-8 LF will be replaced by CRLFWindows平台上： 使用回车（CR）和换行（LF）两个字符来结束一行，回车+换行(CR+LF)，即“\\r\\n”；Mac 和 Linux平台：只使用换行（LF）一个字符来结束一行，即“\\n”；许多 Windows 上的编辑器会悄悄把行尾的换行（LF）转换成回车（CR）和换行（LF），或在用户按下 Enter 键时，插入回车（CR）和换行（LF）两个字符。解决方法1(推荐)： Git 可以在你提交时自动地把回车（CR）和换行（LF）转换成换行（LF），而在检出代码时把换行（LF）转换成回车（CR）和换行（LF）。git config --global core.autocrlf true解决方法2：在提交时把回车和换行转换成换行，而在检出时不转换。git config --global core.autocrlf input解决方法3： 提交检出均不转换git config --global core.autocrlf falsehttps://www.jianshu.com/p/450cd21b36a4Git 解决远程仓库文件大小写问题git 默认不区分文件名大小写git config core.ignorecase false设置本地git环境识别大小写然后把本地文件改成小写的3rdparty/curl/mac（原来是Mac）删除Mac文件夹下的所有文件git rm --cached 3rdparty/curl/Mac -r （注意一定要是原来的Mac,不能在Mac上层目录执行！！！）git add . 在自己的目录下运行！！！git commit -m&#39;rm files&#39;git push 把我坑惨了！！！现在别人拉代码，会把本地的删除！！！git checkout . # 本地所有修改的。没有的提交的，都返回到原来的状态，慎用！会把自己的修改覆盖！！！git checkout -- 3rdparty以后尽量先删除，提交，然后再整理好了，重新提交！https://www.jianshu.com/p/420d38913578client_loop: send disconnect: Broken pipe上述问题出现在vmware里面的centos8上，修改/etc/ssh/ssh_config文件，在Host *条目下添加 IPQoS=throughputHost * IPQoS=throughput重新启动ssh服务systemctl restart sshdGithub常用操作 添加ssh keysssh-keygen -t rsa -C &quot;elesos&quot; 然后一路回车，如果有多个，也可以在下面指定文件名：Enter file in which to save the key (/c/Users/elesos/.ssh/id_rsa): elesos点右上角的Settings，然后选择”SSH and GPG keys”，复制id_rsa.pub内容测试ssh -T git@github.com //详细的还可以用-vT。-T：Disable pseudo-tty allocation.禁止分配伪终端,当用ssh或telnet等登录系统时，系统分配给我们的终端就是伪终端。 如果已经在本地创建了一个仓库，又想在GitHub创建一个仓库，并且让这两个仓库进行同步首先，在GitHub上创建一个新的仓库,创建时最好一切都保持默认设置，不要选GPL协议，不然不是空库了。git remote add origin url添加后，origin是远程主机的名字下一步，把本地库的内容推送到远程库上：git push -u origin master //把master推送到远程由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master推送到远程新的master，还会把本地的master和远程的master关联起来，在以后的推送或者拉取时就可以简化命令(如直接用git push)。现在，只要本地作了提交add和commit之后，就可以：git push origin master把本地master的最新修改推送至GitHub 如何参与开源项目先“Fork”，然后clone这个fork到自己账号下的库,然后，往自己的仓库推送。最后在自己的fork库处发起pull request。 fork了别人的库，如何更新？git remote -vgit remote add upstream source_url //添加别人的库地址git fetch upstreamgit co mastergit merge upstream/master #同步git push origin master #更新到自己的github库上Gitlab vs githubgitlab好像更强，企业里面还有搭建私有的GitLab拥有GitHub拥有的一切，但他拥有更多https://about.gitlab.com/devops-tools/github-vs-gitlab/如何下载超大文件：This repository is over its data quota. Account responsible for LFS bandwidth should purchase more data packs to restore access Fork the repo to one of your users Go to repo settings Find “Include Git LFS objects in archives” under the Archives section and check it Go to the Danger Zone section, select “Archive this repository” Confirm and authorize. Return to the archived repository. 7 .Download as .zip或者通过gitee同步网页版github上新建文件夹：在创建文件那里，输入文件夹的名字，然后 输入’/’即可。SourceTree常用操作Atlassian开发如果本地已经有了Git库，直接从资源管理器把文件夹拖拽到SourceTree上，就添加了一个本地Git库：也可以选择“New”-“Clone from URL”直接从远程克隆到本地。提交左侧面板的“WORKSPACE”-“File status”，右侧会列出当前已修改的文件（Unstaged files）选中某个文件，该文件就自动添加到“Staged files”，实际上是执行了git add README.md命令然后，我们在下方输入Commit描述，点击“Commit”，就完成了一个本地提交：实际上是执行了git commit -m “update README.md”命令。分支左侧面板的“BRANCHES”下，列出了当前本地库的所有分支。当前分支会加粗并用○标记。要切换分支，我们只需要选择该分支，例如master，然后点击右键，在弹出菜单中选择“Checkout master”，实际上是执行命令git checkout master：要合并分支，同样选择待合并分支，例如dev，然后点击右键，在弹出菜单中选择“Merge dev into master”，实际上是执行命令git merge dev：推送在SourceTree的工具栏上，分别有Pull和Push，分别对应命令git pull和git push，只需注意本地和远程分支的名称要对应起来如何clone远程的指定分支？在“远程origin”列表里有所有远端的分支，右键“检出”即可。在本地分支标签下有全部本地的分支，双击就可以切换。https://www.liaoxuefeng.com/wiki/896043488029600提交规范Commit message 都包括三个部分：Header，Body 和 Footer。 &amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt;// 空一行&amp;lt;body&amp;gt;// 空一行&amp;lt;footer&amp;gt; 其中，Header 是必需的，Header部分里面：type（必需）、scope（可选）和subject（必需）type用于说明 commit 的类别，只允许使用下面8个标识。 feat：新功能（feature） fix：修补bug docs：文档（documentation） style： 格式（不影响代码运行的变动） refactor：重构（即不是新增功能，也不是修改bug的代码变动） test：增加测试 chore：构建过程或辅助工具的变动 revert: 如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟被撤销 Commit 的 Header。 scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同，比如模块名。subject 以动词开头，第一个字母小写，结尾不加句号https://www.ruanyifeng.com/blogimg/asset/2016/bg2016010604.pnghttps://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.htmlGit 子模块[submodule &quot;aPlatform&quot;]path = aPlatformurl = http://url/aPlatform.gitgit clone -b develop --recurse-submodules url子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。git submodule add https://github.com/chaconinc/DbConnector 如果你想要放到其他地方，那么可以在命令结尾添加一个不同的路径。git submodule add git@github.com:webrtc/samples.git webrtc/samplesgit config -f .gitmodules submodule.webrtc/samples.branch gh-pages 跟踪子模块仓库的 “gh-pages” 分支如果你已经克隆了项目但忘记了 –recurse-submodulesgit submodule update --init --recursivegit pull 命令添加 --recurse-submodules 当你不在那个子目录中时，Git 并不会跟踪它的内容， 而是将它看作子模块仓库中的某个具体的提交。或 git submodule update –remote https://git-scm.com/book/en/v2/Git-Tools-Submodules参考http://www.ruanyifeng.com/blog/2014/06/git_remote.htmlhttps://help.github.com/articles/testing-your-ssh-connection/https://help.github.com/articles/configuring-a-remote-for-a-fork/https://help.github.com/articles/syncing-a-fork/https://github.com/geeeeeeeeek/git-recipes/wiki/3.3-%E5%88%9B%E5%BB%BAPull-Requesthttp://blog.csdn.net/ygrx/article/details/9109783http://blog.xiayf.cn/2016/01/18/github-fork-pull-request/" }, { "title": "MediaWiki常用操作", "url": "/posts/mediawiki/", "categories": "MediaWiki", "tags": "MediaWiki", "date": "2021-07-05 22:48:33 +0800", "snippet": "修改站点通知在搜索框中输入MediaWiki:Sitenotice 如插入一个链接：[http://www.elesos.com/ &amp;lt;font color=&quot;red&quot;&amp;gt;&amp;lt;b&amp;gt;&amp;lt;big&amp;gt;欢迎访问&amp;lt;/big&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;]创建模板比如输入Template:Fake heading创建一个模板页面。如何编辑左侧导航栏在搜索框里输入MediaWiki:Sidebar安装编辑器在LocalSettings.php加上wfLoadExtension( &#39;WikiEditor&#39; );即可显示外部图片修改 Localsetting.php：$wgAllowExternalImages = true; 然后直接放上外部图片url即可。参考https://www.mediawiki.org/wiki/Manual:Linked_images添加评论功能来必力评论系统 https://www.livere.com/apply 韩国的，最近发现插入广告了。已关闭打开skins\\Vector\\includes\\VectorTemplate.php &amp;lt;div id=&quot;footer&quot; role=&quot;contentinfo&quot;&amp;lt;?php $this-&amp;gt;html( &#39;userlangattributes&#39; ) ?&amp;gt;&amp;gt; &amp;lt;!-- 来必力City版安装代码 --&amp;gt; &amp;lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;MTAyMC80OTg0NS8yNjMzNg==&quot;&amp;gt; &amp;lt;script type=&quot;text/javascript&quot;&amp;gt; var refer = &quot;www.elesos.com/index.php?title=&amp;lt;?php echo urlencode($this-&amp;gt;get( &#39;thispage&#39;, &#39;&#39; )) ?&amp;gt;&quot;.replace(&quot;http://&quot;,&quot;&quot;); (function(d, s) { var j, e = d.getElementsByTagName(s)[0]; if (typeof LivereTower === &#39;function&#39;) { return; } j = d.createElement(s); j.src = &#39;https://cdn-city.livere.com/js/embed.dist.js&#39;; j.async = true; e.parentNode.insertBefore(j, e); })(document, &#39;script&#39;); &amp;lt;/script&amp;gt; &amp;lt;noscript&amp;gt; 为正常使用来必力评论功能请激活JavaScript&amp;lt;/noscript&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;!-- City版安装代码已完成 --&amp;gt; &amp;lt;?php foreach ( $this-&amp;gt;getFooterLinks() as $category =&amp;gt; $links ) { ?&amp;gt;添加cnzz流量统计与备案号使用cnzz，效果如下所示，其中年份会动态变化老版在Skins\\Vector.php中，新版在Skins\\Vector\\includes/VectorTemplate.php中找到&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;在这2个标签上面插入你的统计代码，如下所示： &amp;lt;!-- add cnzz --&amp;gt;&amp;lt;div id=&quot;cnzzwidget&quot; style=&quot;text-align:center&quot;&amp;gt;&amp;lt;nobr&amp;gt;&amp;lt;font size=&quot;1&quot;&amp;gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;document.write(&quot;Copyright &amp;amp;copy; 2013-&quot;+new Date().getFullYear()+&quot; &amp;lt;a href=&#39;http://www.elesos.com&#39;&amp;gt;Elesos.com&amp;lt;/a&amp;gt; All Rights Reserved.&quot;)&amp;lt;/script&amp;gt; 京ICP备13034632号 &amp;lt;/font&amp;gt;&amp;lt;script src=&quot;http://s14.cnzz.com/stat.php?id=5561967&amp;amp;web_id=5561967&amp;amp;show=pic&quot; language=&quot;JavaScript&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;/nobr&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- add cnzz --&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;记得修改网站id和备案号。配置语法高亮需要安装python3，参见Python3 安装将扩展文件放在 extensions/SyntaxHighlight_GeSHi 目录在LocalSettings.php加上wfLoadExtension( &#39;SyntaxHighlight_GeSHi&#39; );加权限：chmod a+x /path/to/extensions/SyntaxHighlight_GeSHi/pygments/pygmentize参考https://www.mediawiki.org/wiki/Extension:SyntaxHighlight#Installation" }, { "title": "Vim 常用操作", "url": "/posts/vim/", "categories": "vim", "tags": "vim", "date": "2021-07-04 22:48:33 +0800", "snippet": "设置行号:set nu跳到文件头和文末结尾gg ： 跳转到文件头 Shift+g ： 跳转到文件末尾清空整个文件内容首先，使用gg调整光标到首行，然后使用dG命令即可。全局替换:[addr]s/源字符串/目的字符串/[option] #s表示替换操作如：:%s/源字符串/目的字符串/c:%s/源字符串/目的字符串/g[addr] 表示检索范围：如：“1，20” ：表示从第1行到20行；“%” ：表示整个文件，同“1,$”；“. ,$” ：从当前行到文件尾；[option] : 表示操作类型，如：g 表示全局替换;c 表示进行确认p 表示替代结果逐行显示（Ctrl + L恢复屏幕）；省略option时仅对每行第一个匹配串进行替换；如果在源字符串和目的字符串中出现特殊字符，需要用”\\”转义乱码查看文件编码格式:set fileencoding先检查ssh工具的终端编码格式，不行再编辑~/.vimrc文件，没有就新建该文件，加上如下几行：set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936set termencoding=utf-8set encoding=utf-8执行脚本出现 bad interpreterbad interpreter: No such file or directory很有可能是你的脚本文件是DOS格式的, 即每一行的行尾以\\r\\n来标识vim filename :set ff? 可以看到dos或unix的字样. 如果的确是dos格式的, 那么你可以用:set ff=unix把它强制为unix格式的, 然后存盘退出. 再运行一遍.批量注释1. 按 ESC 进入 Normal 模式，移动游标定位到 12 行的位置。2. 按 ctrl+v 即进入纵向编辑模式。3. 多次按 j 定位到 23 行（结束位置）。4. 按 I（大写的 i） 进入首行插入模式。5. 按 # 号注释配置项，这时首行会被注释掉。6. 在按 ESC 退出纵向编辑模式的同时所有选中的字符前都加了注释，需要等待 1-2 秒才能看到效果。批量删除注释Normal模式-&amp;gt;ctrl+v进入列编辑模式-&amp;gt;上下箭头选中内容-&amp;gt;d删除-&amp;gt;:wq保存即可批量删除多行1.首先在命令模式下，输入“：set nu”显示行号；2.通过行号确定你要删除的行；3.命令输入“：32,65d”,回车键，32-65行就被删除了如果无意中删除错了，可以使用‘u’键恢复" } ]
